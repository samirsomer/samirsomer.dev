[{"content":"A few years ago, while working on a project with a tight deadline. We had a small bug in the code, but it wasn’t critical, so I decided to take a shortcut to get things done faster. I knew it wasn’t the cleanest solution, but it worked well enough at the time. I told myself I’d come back and fix it later when I had more time. Weeks turned into months, and that \u0026ldquo;temporary\u0026rdquo; solution remained in the code. Eventually, as we added new features, things started to break in unexpected ways. Bugs multiplied, and each new issue became harder to fix because it was all tangled up with that original shortcut. What should have been a quick fix now took days to unravel. That’s when I truly understood the impact of technical debt. Just like borrowing money, cutting corners in coding might help you move faster in the short term, but if you don’t \u0026ldquo;pay it back\u0026rdquo; by cleaning up the code, it accumulates interest. Eventually, it costs you more time and effort to fix it than if you’d done it right from the start.\nCauses of Technical Debt Technical debt occurs when development teams take shortcuts to deliver projects faster. These shortcuts might help meet immediate goals, but if not addressed promptly, they create long-term problems that grow over time. Agile development, which emphasizes quick iterations and frequent releases, can sometimes contribute to technical debt if speed is prioritized over quality and sustainable coding practices.\nRushed Development: When projects face tight deadlines, developers are often pressured to deliver new features or products quickly. To meet these deadlines, they may implement quick, temporary solutions rather than well-thought-out, long-term ones. While this helps the team move fast in the short term, it leaves behind messy code that requires fixing later. Lack of Documentation: Good documentation ensures that developers (including future team members) understand the codebase, the system\u0026rsquo;s architecture, and the reasoning behind key decisions. Skipping documentation can speed up development, but it creates problems down the line. Without proper documentation, developers might misunderstand how certain features were implemented or why certain decisions were made. Changing Requirements: In fast-paced or Agile environments, business requirements often change mid-project. When the goals or features are altered after development has already begun, the code that was written for the original requirements might no longer fit the new ones. Instead of rewriting the code to match the new goals, developers may use patches, workarounds, or \u0026ldquo;hacks\u0026rdquo; to accommodate these changes quickly. While this may seem efficient, it creates technical debt by introducing inconsistencies and complexity into the codebase. Poor Design Choices: Technical debt can result from poor architectural or design decisions, especially in the early stages of a project. Sometimes, teams may lack the experience to choose the right frameworks, tools, or system architecture. Other times, due to lack of time or resources, they opt for quick, short-term solutions instead of scalable, efficient ones. Not Refactoring: As a project grows, the code can become messy and disorganized. Refactoring—cleaning up the code, optimizing performance, and restructuring without changing its functionality—helps keep the codebase maintainable and scalable. However, when refactoring is consistently postponed, the codebase can become increasingly difficult to work with. Consequences of Technical Debt Technical debt may seem small at first but can grow into a major problem over time. The longer you wait to address it, the harder it becomes to fix. This can affect your team’s productivity and even the quality of your software.\nHigher Maintenance Costs: Fixing small issues becomes time-consuming and costly. Slower Development: Adding new features takes longer due to existing issues. More Bugs and Failures: Quick fixes increase the chances of bugs and system crashes. Decreased Morale: Developers get frustrated working with messy, outdated code. System Failure: In severe cases, technical debt can cause complete system failure, leading to expensive overhauls. Strategies to Manage and Reduce Technical Debt Managing technical debt requires an active approach. The goal is to balance delivering features quickly while also keeping the codebase clean and stable. Regularly reviewing and improving the code can prevent technical debt from piling up.\nPrioritize Quality from the Start: Focus on building clean, maintainable code from the beginning of the project. Avoid taking unnecessary shortcuts or implementing \u0026ldquo;quick fixes\u0026rdquo; without a plan to revisit them. Even under tight deadlines, aiming for quality reduces the likelihood of costly issues later on. Regularly Refactor Code: Refactoring is the process of improving and cleaning up the existing codebase without changing its functionality. Make refactoring a regular part of the development cycle to prevent code from becoming unmanageable. Small, consistent improvements over time help maintain the health of the code and reduce the accumulation of technical debt. Invest in Documentation: Comprehensive documentation helps developers understand the system and codebase, making it easier to maintain and modify in the future. Ensure that your code, architecture, and design choices are well-documented, so future team members can easily grasp the project’s structure and intent. Allocate Time for Technical Debt Reduction: Set aside time in each sprint or development cycle specifically to address technical debt. This could include refactoring, improving documentation, or addressing lingering bugs. Consistently reducing debt prevents it from becoming a larger issue in the future. Plan for Scalability Early: Make sure your system architecture is built with scalability in mind from the beginning. Poor design decisions early in the project can lead to massive technical debt when the system grows. Consider the long-term needs of the project to avoid costly rewrites later on. Conclusion Avoiding technical debt requires deliberate, ongoing effort. By prioritizing code quality, regularly refactoring, investing in documentation, and maintaining good coding standards, teams can minimize the risks of technical debt. Managing workload effectively and making technical debt reduction part of the process ensures long-term sustainability for any software project.\n","permalink":"http://localhost:1313/posts/technical_debt/","summary":"\u003cp\u003eA few years ago, while working on a project with a tight deadline. We had a small bug in the code, but it wasn’t critical, so I decided to take a shortcut to get things done faster. I knew it wasn’t the cleanest solution, but it worked well enough at the time. I told myself I’d come back and fix it later when I had more time. Weeks turned into months, and that \u0026ldquo;temporary\u0026rdquo; solution remained in the code. Eventually, as we added new features, things started to break in unexpected ways. Bugs multiplied, and each new issue became harder to fix because it was all tangled up with that original shortcut. What should have been a quick fix now took days to unravel. That’s when I truly understood the impact of \u003cstrong\u003etechnical debt\u003c/strong\u003e. Just like borrowing money, cutting corners in coding might help you move faster in the short term, but if you don’t \u0026ldquo;pay it back\u0026rdquo; by cleaning up the code, it accumulates interest. Eventually, it costs you more time and effort to fix it than if you’d done it right from the start.\u003c/p\u003e","title":"The True Price of Technical Debt: Why Shortcuts Are Never Free"},{"content":"A jump host is a server inside a secure zone, that you access from a less secure zone. You can then jump from this host to greater security zones. An example would be a high security zone inside a corporation.\nin this tutorial we are going to get a backup of a router configuration through a jumpserver using JumpSSH JumpSSH is a module for Python 2.7+/3.4+ that can be used to run commands on remote servers through a gateway. installing the required packages\npip install jumpssh pip install python-dotenv we will use python-dotenv to manage our credentials to environment variable.\ncreating a .env file in the same path of our script\njumpserver_ip = \u0026#39;your_jump_server_ip\u0026#39; jumpserver_username = \u0026#39;your_jump_server_username\u0026#39; jumpserver_password = \u0026#39;your_jump_server_password\u0026#39; remote_ip = \u0026#39;your_remote_node_ip\u0026#39; remote_username = \u0026#39;your_remote_node_username\u0026#39; remote_password = \u0026#39;your_remote_node_password\u0026#39; then creating our script\nfrom dotenv import load_dotenv import jumpssh import os load_dotenv() jumpserver_ip = os.getenv(\u0026#34;jumpserver_ip\u0026#34;) jumpserver_username = os.getenv(\u0026#34;jumpserver_username\u0026#34;) jumpserver_password = os.getenv(\u0026#34;jumpserver_password\u0026#34;) remote_ip = os.getenv(\u0026#34;remote_ip\u0026#34;) remote_password = os.getenv(\u0026#34;remote_password\u0026#34;) gateway_session = SSHSession(jumpserver_ip, jumpserver_username, password=jumpserver_password).open() remote_session = gateway_session.get_remote_session(remote_ip, password=remote_password, allow_agent=False, look_for_keys=False) with open(\u0026#39;R1.txt\u0026#39;, \u0026#39;w\u0026#39;) as fl: fl.write(remote_session.get_cmd_output(\u0026#39;show running config\u0026#39;)) remote_session.close() gateway_session.close() ","permalink":"http://localhost:1313/posts/jumpssh/","summary":"\u003cp\u003eA jump host is a server inside a secure zone, that you access from a less secure zone. You can then jump from this host to greater security zones. An example would be a high security zone inside a corporation.\u003c/p\u003e\n\u003cp\u003ein this tutorial we are going to get a backup of a router configuration through a jumpserver using \u003cem\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/AmadeusITGroup/JumpSSH\"\u003eJumpSSH\u003c/a\u003e\u003c/strong\u003e\u003c/em\u003e\n\u003cem\u003e\u003cstrong\u003eJumpSSH\u003c/strong\u003e\u003c/em\u003e is a module for Python 2.7+/3.4+ that can be used to run commands on remote servers through a gateway.\ninstalling the required packages\u003c/p\u003e","title":"How to access a network device through a jump server using JumpSSH"},{"content":"The internet is a collection connected networks, at the heart of it lies BGP as the backbone for exchanging BGP is at the heart of how the internet runs and operates. as such, monitoring your BGP network is an important task to ensure no configuration or malicious attacks are present at your network. BGPAlerter is a tool developed by NTT that monitors eBGP in real-time with the ability to send alerts to multiple notification channels. with BGPAlerter you can monitor you network for any of the following scenarios:\nPrefixes loses visibility. Prefixes is hijacking. Invalid RPKI announcements (e.g., not matching prefix length). Prefixes announcements not covered by ROAs. Expiring ROAs. RPKI Trust Anchors malfunctions your AS is announcing a new prefix that was never announced before. an unexpected upstream (left-side) AS appears in an AS path. an unexpected downstream (right-side) AS appears in an AS path. one of the AS paths used to reach your prefix matches a specific condition defined by you. ## Installing BGPAlerter BGPAlerter can be installed either by using the per-compiled binaries, compiling from source, or using Docker. for simplicity We’ll be using the Binary version running on Linux Ubuntu 18.04.\nFirst we are going to download the binary release from here.\nmkdir /opt/bgpalerter cd /opt/bgpalerter wget https://github.com/nttgin/BGPalerter/releases/download/v1.29.0/bgpalerter-linux-x64 Next, simply change the permission to make it executable and run the binary\nchmod +x bgpalerter-linux-x64 mv bgpalerter-linux-x64 bgpalerter ./bgpalerter Configuring BGPAlerter First time running bgrpalerter you will be with a configuration wizard that will walk you through the configuration, you will be asked to:\nAutonomous Systems Numbers you want to monitor, you can monitor multiple ASNs separated by commas decide if you want to receive alerts when new prefixes are announced decide if you want to receive alerts if a new upstream/downstream appears in the path The file prefixes.yml cannot be loaded. Do you want to auto-configure BGPalerter? Yes Which Autonomous System(s) you want to monitor? (comma-separated, e.g., 2914,3333) 15706 Do you want to be notified when your AS is announcing a new prefix? Yes Do you want to be notified when a new upstream AS appears in a BGP path? Yes Do you want to be notified when a new downstream AS appears in a BGP path? Yes After completing the wizard, BGPAlerter will create the config file \u0026ldquo;config.yml\u0026rdquo; and \u0026ldquo;prefixes.yml\u0026rdquo;\nPrefixes Configuration the prefixes.yml file will contains all the prefixes belonging to the ASNs you are monitoring with additional attributes\nField Description Expected Type Required asn The expected origin AS(es) of the prefix. integer or an array of integers. Yes description A description that will be reported in the alerts. string Yes ignoreMorespecifics Prefixes more specific of the current one will be excluded from monitoring. boolean Yes ignore Exclude the current prefix from monitoring. Useful when you are monitoring a prefix and you want to exclude a particular sub-prefix. boolean - includeMonitors The list of monitors you want to run on this prefix. If this attribute is not declared, all monitors will be used. Not compatible with excludeMonitors. An array of strings (monitors name according to config.yml) - excludeMonitors The list of monitors you want to exclude on this prefix. Not compatible with includeMonitors. Use monitors name attributes, as defined in the monitor list in config.yml. An array of strings (monitors name according to config.yml) - path A list path matching rules, read more here. - group The name of the group that will receive alerts about this monitored prefix. See here. string - below is an example prefixes configuration:\n10.0.0.0/24: description: Customer1 asn: - 65536 ignoreMorespecifics: false ignore: false group: group1 192.168.0.0/24: description: No description provided (No ROA available) asn: - 65536 ignoreMorespecifics: false ignore: false group: group2 BGPAlerter Config.yml All of BGPalerter configuration is stored in config.yml, the main sections you will be configuring are:\nMonitors: analyze the data flow and produce alerts. Different monitors try to detect different issues. Reports: configure your notification channels. Defining a Notification channel by default alerts will appear on logs/report.log, alternatively additional methods of notification can be configured such as email, slack, telegram, alerta, kafka, \u0026hellip;etc.\nbelow sample shows configuring email alerts.\n- file: reportEmail channels: - hijack - newprefix - visibility - path - misconfiguration - rpki - roa params: showPaths: 5 # Amount of AS_PATHs to report in the alert senderEmail: bgpalerter@thenetmechanic.com # BGPalerter uses nodemailer. # The smtp section can be configured with all the parameters available at https://nodemailer.com/smtp/ # the following are just the most useful one smtp: host: mail.thenetmechanic.com port: 25 secure: false # If true the connection will use TLS when connecting to server. If false it will be still possible doing connection upgrade via STARTTLS ignoreTLS: true # If true TLS will be completely disabled, including STARTTLS. Set this to true if you see certificate errors in the logs. auth: user: samir@thenetmechanic.com pass: \u0026lt;email_password\u0026gt; type: login tls: rejectUnauthorized: true # Reject unauthorized certificates notifiedEmails: default: - samir@thenetmechanic.com the email you will receive will look like\ntype:announcement timestamp:1643956781131 prefix:2a00:5884::/32 peer:124.0.0.3 path:[1,2,3,204092] nextHop:124.0.0.3 aggregator:null DETAILS: ------------------------------------------------------ Monitored prefix: 10.0.0.0/24 Prefix Description: Customer1 Usually announced by: 65536 Event type: monitor-passthrough Now announced by: 65538 Now announced with: 2a00:5884::/32 When event started: 2022-02-04 06:39:41 UTC Last event: 2022-02-04 06:39:41 UTC Detected by peers: 1 See in BGPlay: https://bgplay.massimocandela.com/?resource=0.0.0.0/0\u0026amp;ignoreReannouncements=true\u0026amp;starttime=1643956481\u0026amp;endtime=1643956781\u0026amp;rrcs=0,1,2,5,6,7,10,11,13,14,15,16,18,20\u0026amp;type=bgp Top 1 most used AS paths: 2,3,204092 Monitoring BGPAlerter You can monitor your BGPAlerter process to make sure the service is always up using the \u0026ldquo;uptimeAPI\u0026rdquo;. this enables retrieving the current status of BGPAlerter through API.\nTo configure uptimeAPI in the config.yml\nprocessMonitors: - file: uptimeApi params: useStatusCodes: true The API is reachable at http://localhost:8011/status and provides a summary of the status of various components of BGPalerter. If any of the components is having a problem, the attribute warning is set to true.\nBelow is example of of the API output:\nsamir@tnm01:~$ curl -s http://localhost:8011/status | jq { \u0026#34;warning\u0026#34;: false, \u0026#34;connectors\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ConnectorRIS\u0026#34;, \u0026#34;connected\u0026#34;: true } ], \u0026#34;rpki\u0026#34;: { \u0026#34;data\u0026#34;: true, \u0026#34;stale\u0026#34;: false, \u0026#34;provider\u0026#34;: \u0026#34;rpkiclient\u0026#34; } } samir@tnm01:~$ You can change the port or the IP address from the localhost in the config.yml\nrest: host: localhost port: 8011 In conclusion, BGP monitoring is a critical task for ensuring the security and stability of your network. BGPAlerter offers a powerful and customizable solution for real-time monitoring of BGP activity, allowing you to detect issues such as prefix hijacking, invalid announcements, or unexpected changes in AS paths. By following the straightforward installation and configuration steps outlined, you can set up BGPAlerter to receive alerts via various notification channels, ensuring that you\u0026rsquo;re always informed about potential network vulnerabilities. Proactively monitoring BGP can help safeguard your infrastructure from both misconfigurations and malicious attacks.\n","permalink":"http://localhost:1313/posts/bgpalerter/","summary":"\u003cp\u003eThe internet is a collection connected networks, at the heart of it lies BGP as the backbone for exchanging BGP is at the heart of how the internet runs and operates. as such, monitoring your BGP network is an important task to ensure no configuration or malicious attacks are present at your network. \u003ca href=\"https://github.com/nttgin/BGPalerter\"\u003eBGPAlerter\u003c/a\u003e is a tool developed by NTT that monitors eBGP in real-time with the ability to send alerts to multiple notification channels. with BGPAlerter you can monitor you network for any of the following scenarios:\u003c/p\u003e","title":"Monitor your BGP Activities with BGPAlerter"},{"content":"I once found myself in a situation that taught me a valuable lesson about communication. I was part of a project with a team of talented engineers, and we had come up with a solution we were proud of. But when it came time to present it to top management, we hit a wall. We were so focused on the technical details that we couldn\u0026rsquo;t explain our solution in a way they could easily understand. This was a huge wake-up call for me—being good at coding wasn\u0026rsquo;t enough. As Vinh Giang says:\n\u0026ldquo;You might be 10/10 technically brilliant, but if your ability to communicate is a 2/10, do you think the customer perceives you as a 10/10 or a 2/10? You’re only as good as you can communicate.\u0026rdquo;\nNo matter how technically sound our work was, it was practically worthless if we couldn’t get others to understand its value. This was my reminder that being an engineer isn’t just about building solutions—it’s also about communicating and working effectively with others. And this is where soft skills come into play.\nWhy Software Engineers Need Soft Skills More Than Ever Software Engineers can no longer work in isolation, focusing only on technical tasks. Today’s engineering landscape is collaborative team sport. where projects necessitate effective communication, teamwork, and adaptability. Whether you\u0026rsquo;re leading a project, working with cross-functional teams, or presenting ideas to stakeholders, communication and other soft skills are crucial to success.\nbelow are some scenarios where soft skills matter just as much as technical expertise:\nLeading a Team: When you\u0026rsquo;re in charge of a team, it’s not just about delegating tasks; you need strong collaboration and conflict resolution skills to keep everyone on the same page. Teams often have different personalities, ideas, and ways of working, which can sometimes lead to disagreements. Knowing how to handle these situations calmly and finding solutions that work for everyone is crucial for keeping the project on track and maintaining team morale. Adapting to Change: The tech industry is constantly evolving, and being adaptable is key to thriving in this fast-paced environment. Whether it\u0026rsquo;s adopting new tools, adjusting to shifting project goals, or learning new skills, having a growth mindset helps you stay flexible and open to change. Rather than feeling overwhelmed, adaptability allows you to see change as an opportunity to grow and improve. Pitching Ideas: Being able to clearly explain your innovation to clients, investors, or non-technical team members is a must. You need to simplify complex ideas, highlight the benefits, and tell a compelling story to capture their interest. Good storytelling helps people see the bigger picture and understand the value of your solution, making it easier to get buy-in for your ideas. Managing Multiple Stakeholders: When working on projects, engineers often have to balance the needs and expectations of different stakeholders—clients, managers, or other teams. Strong communication and negotiation skills are essential to ensure that everyone’s needs are met while keeping the project on track. Knowing how to manage expectations and address concerns can prevent misunderstandings and delays. The Soft Skills Every Engineer Needs So, what soft skills should engineers develop? Here are a few that can make a big difference in your career:\nCommunication: Being able to explain technical concepts to both technical and non-technical audiences is essential. Whether you’re writing reports, speaking with clients, or presenting ideas to your team, clear communication helps everyone stay on the same page.\nEmotional Intelligence: Understanding and managing both your emotions and those of your team can significantly impact how well everyone works together. Emotional intelligence helps build stronger relationships, improve team dynamics, and boost overall productivity.\nTime Management: Prioritizing tasks, meeting deadlines, and maintaining a good work-life balance are key to staying efficient and avoiding burnout.\nProblem-Solving: Creative thinking is just as important as technical know-how. When challenges arise, having the ability to think outside the box and come up with innovative solutions sets you apart.\nNegotiation: Whether you\u0026rsquo;re negotiating project details, timelines, or resolving conflicts, being able to find win-win solutions is an important skill for advancing both personal and team goals.\nHow to Build Your Soft Skills The good news is, soft skills can be learned and improved with practice. Here are some practical ways to enhance them:\nAsk for Feedback: Reach out to colleagues or mentors to get honest feedback on areas like communication, teamwork, or leadership. Join Clubs or Groups: Get involved in activities outside of work. This helps build interpersonal skills and gives you leadership experience. Take Online Courses: There are plenty of courses available that can help you strengthen specific skills like time management or emotional intelligence. Volunteer: Sharing your expertise by volunteering not only helps others but also improves your communication skills and confidence. Conclusion: Engineering Success Beyond the Code While technical skills are essential for engineers, soft skills are just as important in today’s collaborative, fast-paced environment. Developing your communication, leadership, and emotional intelligence can take your career to the next level, making you not only a better engineer but a more effective leader. So, invest time in honing these skills—they’ll empower you to excel in both your personal and professional life.\n","permalink":"http://localhost:1313/posts/softskills/","summary":"\u003cp\u003eI once found myself in a situation that taught me a valuable lesson about communication. I was part of a project with a team of talented engineers, and we had come up with a solution we were proud of. But when it came time to present it to top management, we hit a wall. We were so focused on the technical details that we couldn\u0026rsquo;t explain our solution in a way they could easily understand. This was a huge wake-up call for me—being good at coding wasn\u0026rsquo;t enough. As Vinh Giang says:\u003c/p\u003e","title":"Why Engineers Need to Work on Their Soft Skills"},{"content":"Restic As a certified digital hoarder, I\u0026rsquo;ve lost more files in my life than I can count. One day, after losing a particular file that contained a week\u0026rsquo;s worth of work, I decided I\u0026rsquo;d had enough. I searched the internet, determined to find a backup solution that would save me from my own clumsiness. and after some digging, I stumbled upon Restic. Restic is an open-source backup tool that emphasizes ease of use and versatility. It offers robust features like deduplication, encryption, and snapshotting that make backing up data a breeze.\nThe main reasons which drown me to Restic were:\nFree Open Source: anyone can view, edit, and contribute to the source code, fostering an environment of collaboration and continuous improvement. Easy to Setup \u0026amp; Deploy: since it’s written in Go. It is a single binary executable that you can run without a server or complex setup Multiple Storage Backends: it can support local storage, network drives, or cloud storage. Deduplication and Encryption: uses deduplication to save storage space. Deduplication works by only storing new parts of files that have changed since the last backup. Restic encrypts your data before it leaves your machine. This means your data is always secure, whether it’s sitting on your backup server or being transmitted over the internet. Using Restic 1- Initializing Backup Repository Before you can start backing up your data, you need to initialize a backup repository. This is where Restic will store your backup data.\nTo initialize a repository, you use the init command followed by the -r option and the location where you want to store your backups. For example, if you want to store your backups in a local directory called /srv/mybackup, you would use the following command:\nrestic -r /srv/mybackup init 2- Taking a Backup After initializing your repository, you can start backing up your data. To do this, you use the backup command followed by the -r option and your repository location, then the path to the data you want to back up.\nFor example, to back up a directory called /home/user/documents, you would use the following command:\nrestic -r /srv/mybackup backup /home/user/documents Restic will then back up your data and print a summary when it\u0026rsquo;s done.\n3- Listing Snapshots In Restic, you can easily view all the snapshots you have taken with the snapshots command. This command will list all the snapshots in your repository, along with their ID, date, and the directories they contain.\nTo list your snapshots, simply use the snapshots command followed by the -r option and your repository location. For example, if your repository is located in a local directory called /srv/mybackup, you would use the following command:\nrestic -r /srv/mybackup snapshots The output of this command will show a list of your snapshots, like this:\nID Time Host Tags Paths ---------------------------------------------------------------------- ae4rtg 2023-11-26 11:23:00 mycomputer /home/user/documents def456 2023-11-27 10:43:00 mycomputer /home/user/documents ---------------------------------------------------------------------- 2 snapshots In this example, ae4rtg and def456 are the IDs of the snapshots.\n4- Restoring a Backup If you need to restore your data from a backup, you can use the restore command followed by the -r option, your repository location, the snapshot ID you want to restore from, and the -t option followed by the location where you want to restore your data.\nFor example, to restore a snapshot with the ID ae4rtg to a directory called /restore, you would use the following command:\nrestic -r /srv/mybackup restore ae4trg -t /restore Conclusion In conclusion, Restic is a powerful tool for backing up your data. Its ease of use, combined with features like deduplication, encryption, snapshotting, and easy restores make it an excellent choice for anyone looking for a robust and reliable backup solution. As with any tool, it may not be perfect for every situation, but its versatility and simplicity make it worth considering for your backup needs.\n","permalink":"http://localhost:1313/posts/restic/","summary":"\u003ch2 id=\"restic\"\u003eRestic\u003c/h2\u003e\n\u003cp\u003eAs a certified digital hoarder, I\u0026rsquo;ve lost more files in my life than I can count. One day, after losing a particular file that contained a week\u0026rsquo;s worth of work, I decided I\u0026rsquo;d had enough. I searched the internet, determined to find a backup solution that would save me from my own clumsiness. and after some digging, I stumbled upon \u003cem\u003e\u003cstrong\u003e\u003ca href=\"https://restic.net/\"\u003eRestic\u003c/a\u003e.\u003c/strong\u003e\u003c/em\u003e\nRestic is an open-source backup tool that emphasizes ease of use and versatility. It offers robust features like deduplication, encryption, and snapshotting that make backing up data a breeze.\u003c/p\u003e","title":"Why I use Restic as my backup tool"}]